name: Build on version bump

on:
    push:
        branches:
            - master
    workflow_dispatch:

jobs:
    package-windows:
        name: Build and Package on Windows
        runs-on: windows-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 18

            - name: Get version from package.json
              id: package-version
              run: |
                  $ver = (Get-Content package.json | ConvertFrom-Json).version
                  echo "version=$ver" >> $env:GITHUB_OUTPUT
                  Write-Host "Current version: $ver"

            - name: Install dependencies
              run: npm ci

            - name: Make (windows)
              run: npm run make

            - name: Prepare and upload Windows artifacts
              run: |
                  $ver = '${{ steps.package-version.outputs.version }}'
                  $sdir = 'out\make\squirrel.windows\x64'
                  Write-Host "Using version: $ver"

                  if (Test-Path $sdir) {
                    # find installer
                    $exe = Get-ChildItem -Path $sdir -Filter '*Setup.exe' -File -ErrorAction SilentlyContinue | Select-Object -First 1
                    if (-not $exe) { $exe = Get-ChildItem -Path $sdir -Filter 'Snowverlay-*.exe' -File -ErrorAction SilentlyContinue | Select-Object -First 1 }
                    if ($exe) {
                      Copy-Item $exe.FullName -Destination (Join-Path $sdir "Snowverlay-$ver-Setup.exe") -Force
                      Write-Host "Copied installer to Snowverlay-$ver-Setup.exe"
                    } else { Write-Host 'No installer found' }

                    # find nupkg
                    $pkg = Get-ChildItem -Path $sdir -Filter '*full.nupkg' -File -ErrorAction SilentlyContinue | Select-Object -First 1
                    if (-not $pkg) { $pkg = Get-ChildItem -Path $sdir -Filter '*.nupkg' -File -ErrorAction SilentlyContinue | Select-Object -First 1 }
                    if ($pkg) {
                      Copy-Item $pkg.FullName -Destination (Join-Path $sdir "snowverlay-$ver-full.nupkg") -Force
                      Write-Host "Copied nupkg to snowverlay-$ver-full.nupkg"
                    } else { Write-Host 'No nupkg found' }
                  } else {
                    Write-Host "No squirrel dir: $sdir"
                  }

                  # create portable zip of unpacked app
                  $appdir = 'out\Snowverlay-win32-x64'
                  if (Test-Path $appdir) {
                    $zip = "out\Snowverlay-$ver-portable.zip"
                    if (Test-Path $zip) { Remove-Item $zip -Force }
                    Compress-Archive -Path (Join-Path $appdir '*') -DestinationPath $zip -Force
                    Write-Host "Created $zip"
                  } else { Write-Host 'No unpacked app dir to zip' }

            - name: Upload Setup.exe
              uses: actions/upload-artifact@v4
              with:
                  name: Snowverlay-${{ steps.package-version.outputs.version }}-Setup
                  path: out/make/squirrel.windows/x64/Snowverlay-${{ steps.package-version.outputs.version }}-Setup.exe
                  if-no-files-found: warn

            - name: Upload nupkg
              uses: actions/upload-artifact@v4
              with:
                  name: Snowverlay-${{ steps.package-version.outputs.version }}-nupkg
                  path: out/make/squirrel.windows/x64/snowverlay-${{ steps.package-version.outputs.version }}-full.nupkg
                  if-no-files-found: warn

            - name: Upload portable zip
              uses: actions/upload-artifact@v4
              with:
                  name: Snowverlay-${{ steps.package-version.outputs.version }}-portable
                  path: out/Snowverlay-${{ steps.package-version.outputs.version }}-portable.zip
                  if-no-files-found: warn
